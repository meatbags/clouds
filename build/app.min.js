var clouds =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/config.js":
/*!**********************!*\
  !*** ./js/config.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/** Global config. */\n\nconst Config = {\n  width: 1000,\n  height: 750\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Config);\n\n//# sourceURL=webpack://clouds/./js/config.js?");

/***/ }),

/***/ "./js/lib/glsl/CopyShader.js":
/*!***********************************!*\
  !*** ./js/lib/glsl/CopyShader.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\n\nTHREE.CopyShader = {\n\n\t\tuniforms: {\n\n\t\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\t\"opacity\": { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n\n\t\tfragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"gl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n\n};\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/CopyShader.js?");

/***/ }),

/***/ "./js/lib/glsl/EffectComposer.js":
/*!***************************************!*\
  !*** ./js/lib/glsl/EffectComposer.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.EffectComposer = function (renderer, renderTarget) {\n\n\tthis.renderer = renderer;\n\n\tif (renderTarget === undefined) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getDrawingBufferSize(new THREE.Vector2());\n\t\trenderTarget = new THREE.WebGLRenderTarget(size.width, size.height, parameters);\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif (THREE.CopyShader === undefined) {\n\n\t\tconsole.error('THREE.EffectComposer relies on THREE.CopyShader');\n\t}\n\n\tif (THREE.ShaderPass === undefined) {\n\n\t\tconsole.error('THREE.EffectComposer relies on THREE.ShaderPass');\n\t}\n\n\tthis.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n\n\tthis._previousFrameTime = Date.now();\n};\n\nObject.assign(THREE.EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\t},\n\n\taddPass: function (pass) {\n\n\t\tthis.passes.push(pass);\n\n\t\tvar size = this.renderer.getDrawingBufferSize(new THREE.Vector2());\n\t\tpass.setSize(size.width, size.height);\n\t},\n\n\tinsertPass: function (pass, index) {\n\n\t\tthis.passes.splice(index, 0, pass);\n\t},\n\n\tisLastEnabledPass: function (passIndex) {\n\n\t\tfor (var i = passIndex + 1; i < this.passes.length; i++) {\n\n\t\t\tif (this.passes[i].enabled) {\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\trender: function (deltaTime) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif (deltaTime === undefined) {\n\n\t\t\tdeltaTime = (Date.now() - this._previousFrameTime) * 0.001;\n\t\t}\n\n\t\tthis._previousFrameTime = Date.now();\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass,\n\t\t    i,\n\t\t    il = this.passes.length;\n\n\t\tfor (i = 0; i < il; i++) {\n\n\t\t\tpass = this.passes[i];\n\n\t\t\tif (pass.enabled === false) continue;\n\n\t\t\tpass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n\t\t\tpass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n\t\t\tif (pass.needsSwap) {\n\n\t\t\t\tif (maskActive) {\n\n\t\t\t\t\tvar context = this.renderer.context;\n\n\t\t\t\t\tcontext.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n\n\t\t\t\t\tthis.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n\t\t\t\t\tcontext.stencilFunc(context.EQUAL, 1, 0xffffffff);\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\t\t\t}\n\n\t\t\tif (THREE.MaskPass !== undefined) {\n\n\t\t\t\tif (pass instanceof THREE.MaskPass) {\n\n\t\t\t\t\tmaskActive = true;\n\t\t\t\t} else if (pass instanceof THREE.ClearMaskPass) {\n\n\t\t\t\t\tmaskActive = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.renderer.setRenderTarget(currentRenderTarget);\n\t},\n\n\treset: function (renderTarget) {\n\n\t\tif (renderTarget === undefined) {\n\n\t\t\tvar size = this.renderer.getDrawingBufferSize(new THREE.Vector2());\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize(size.width, size.height);\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\t},\n\n\tsetSize: function (width, height) {\n\n\t\tthis.renderTarget1.setSize(width, height);\n\t\tthis.renderTarget2.setSize(width, height);\n\n\t\tfor (var i = 0; i < this.passes.length; i++) {\n\n\t\t\tthis.passes[i].setSize(width, height);\n\t\t}\n\t}\n\n});\n\nTHREE.Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n};\n\nObject.assign(THREE.Pass.prototype, {\n\n\tsetSize: function (width, height) {},\n\n\trender: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n\n\t\tconsole.error('THREE.Pass: .render() must be implemented in derived pass.');\n\t}\n\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\nTHREE.Pass.FullScreenQuad = function () {\n\n\tvar camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\tvar geometry = new THREE.PlaneBufferGeometry(2, 2);\n\n\tvar FullScreenQuad = function (material) {\n\n\t\tthis._mesh = new THREE.Mesh(geometry, material);\n\t};\n\n\tObject.defineProperty(FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\t\t},\n\n\t\tset: function (value) {\n\n\t\t\tthis._mesh.material = value;\n\t\t}\n\n\t});\n\n\tObject.assign(FullScreenQuad.prototype, {\n\n\t\trender: function (renderer) {\n\n\t\t\trenderer.render(this._mesh, camera);\n\t\t}\n\n\t});\n\n\treturn FullScreenQuad;\n}();\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/EffectComposer.js?");

/***/ }),

/***/ "./js/lib/glsl/LuminosityHighPassShader.js":
/*!*************************************************!*\
  !*** ./js/lib/glsl/LuminosityHighPassShader.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author bhouston / http://clara.io/\r\n *\r\n * Luminosity\r\n * http://en.wikipedia.org/wiki/Luminosity\r\n */\n\nTHREE.LuminosityHighPassShader = {\n\n\t\tshaderID: \"luminosityHighPass\",\n\n\t\tuniforms: {\n\n\t\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\t\"luminosityThreshold\": { type: \"f\", value: 1.0 },\n\t\t\t\t\"smoothWidth\": { type: \"f\", value: 1.0 },\n\t\t\t\t\"defaultColor\": { type: \"c\", value: new THREE.Color(0x000000) },\n\t\t\t\t\"defaultOpacity\": { type: \"f\", value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n\n\t\tfragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 defaultColor;\", \"uniform float defaultOpacity;\", \"uniform float luminosityThreshold;\", \"uniform float smoothWidth;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"vec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"float v = dot( texel.xyz, luma );\", \"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\", \"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\", \"gl_FragColor = mix( outputColor, texel, alpha );\", \"}\"].join(\"\\n\")\n\n};\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/LuminosityHighPassShader.js?");

/***/ }),

/***/ "./js/lib/glsl/RenderPass.js":
/*!***********************************!*\
  !*** ./js/lib/glsl/RenderPass.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n\n\t\tTHREE.Pass.call(this);\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n};\n\nTHREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\t\tconstructor: THREE.RenderPass,\n\n\t\trender: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n\n\t\t\t\tvar oldAutoClear = renderer.autoClear;\n\t\t\t\trenderer.autoClear = false;\n\n\t\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t\t\tvar oldClearColor, oldClearAlpha;\n\n\t\t\t\tif (this.clearColor) {\n\n\t\t\t\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\t\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\t\t\t\trenderer.setClearColor(this.clearColor, this.clearAlpha);\n\t\t\t\t}\n\n\t\t\t\tif (this.clearDepth) {\n\n\t\t\t\t\t\trenderer.clearDepth();\n\t\t\t\t}\n\n\t\t\t\trenderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n\n\t\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\t\tif (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t\trenderer.render(this.scene, this.camera);\n\n\t\t\t\tif (this.clearColor) {\n\n\t\t\t\t\t\trenderer.setClearColor(oldClearColor, oldClearAlpha);\n\t\t\t\t}\n\n\t\t\t\tthis.scene.overrideMaterial = null;\n\t\t\t\trenderer.autoClear = oldAutoClear;\n\t\t}\n\n});\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/RenderPass.js?");

/***/ }),

/***/ "./js/lib/glsl/ShaderPass.js":
/*!***********************************!*\
  !*** ./js/lib/glsl/ShaderPass.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.ShaderPass = function (shader, textureID) {\n\n\t\tTHREE.Pass.call(this);\n\n\t\tthis.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n\t\tif (shader instanceof THREE.ShaderMaterial) {\n\n\t\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\t\tthis.material = shader;\n\t\t} else if (shader) {\n\n\t\t\t\tthis.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n\t\t\t\tthis.material = new THREE.ShaderMaterial({\n\n\t\t\t\t\t\tdefines: Object.assign({}, shader.defines),\n\t\t\t\t\t\tuniforms: this.uniforms,\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t\t});\n\t\t}\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad(this.material);\n};\n\nTHREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\t\tconstructor: THREE.ShaderPass,\n\n\t\trender: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n\n\t\t\t\tif (this.uniforms[this.textureID]) {\n\n\t\t\t\t\t\tthis.uniforms[this.textureID].value = readBuffer.texture;\n\t\t\t\t}\n\n\t\t\t\tthis.fsQuad.material = this.material;\n\n\t\t\t\tif (this.renderToScreen) {\n\n\t\t\t\t\t\trenderer.setRenderTarget(null);\n\t\t\t\t\t\tthis.fsQuad.render(renderer);\n\t\t\t\t} else {\n\n\t\t\t\t\t\trenderer.setRenderTarget(writeBuffer);\n\t\t\t\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\t\t\t\tif (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t\t\t\tthis.fsQuad.render(renderer);\n\t\t\t\t}\n\t\t}\n\n});\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/ShaderPass.js?");

/***/ }),

/***/ "./js/lib/glsl/SkyShader.js":
/*!**********************************!*\
  !*** ./js/lib/glsl/SkyShader.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author zz85 / https://github.com/zz85\r\n *\r\n * Based on \"A Practical Analytic Model for Daylight\"\r\n * aka The Preetham Model, the de facto standard analytic skydome model\r\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\r\n *\r\n * First implemented by Simon Wallner\r\n * http://www.simonwallner.at/projects/atmospheric-scattering\r\n *\r\n * Improved by Martin Upitis\r\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\r\n *\r\n * Three.js integration by zz85 http://twitter.com/blurspline\r\n*/\n\nTHREE.Sky = function () {\n\t\tvar shader = THREE.Sky.SkyShader;\n\t\tvar material = new THREE.ShaderMaterial({\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tuniforms: THREE.UniformsUtils.clone(shader.uniforms),\n\t\t\t\tside: THREE.BackSide\n\t\t});\n\t\tTHREE.Mesh.call(this, new THREE.BoxBufferGeometry(1, 1, 1), material);\n};\n\nTHREE.Sky.prototype = Object.create(THREE.Mesh.prototype);\nTHREE.Sky.SkyShader = {\n\t\tuniforms: {\n\t\t\t\tluminance: { value: 1 },\n\t\t\t\tturbidity: { value: 11.7 },\n\t\t\t\trayleigh: { value: 2 },\n\t\t\t\tmieCoefficient: { value: 0.005 },\n\t\t\t\tmieDirectionalG: { value: 0.8 },\n\t\t\t\tsunPosition: { value: new THREE.Vector3() }\n\t\t},\n\n\t\tvertexShader: ['uniform vec3 sunPosition;', 'uniform float rayleigh;', 'uniform float turbidity;', 'uniform float mieCoefficient;', 'varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', 'const vec3 up = vec3( 0.0, 1.0, 0.0 );',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float e = 2.71828182845904523536028747135266249775724709369995957;', 'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t// wavelength of used primaries, according to preetham\n\t\t'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\t'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\t'const float v = 4.0;', 'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\t'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\t'const float cutoffAngle = 1.6110731556870734;', 'const float steepness = 1.5;', 'const float EE = 1000.0;', 'float sunIntensity( float zenithAngleCos ) {', '\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );', '\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );', '}', 'vec3 totalMie( float T ) {', '\tfloat c = ( 0.2 * T ) * 10E-18;', '\treturn 0.434 * c * MieConst;', '}', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvWorldPosition = worldPosition.xyz;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tgl_Position.z = gl_Position.w;', // set z to camera.far\n\n\t\t'\tvSunDirection = normalize( sunPosition );', '\tvSunE = sunIntensity( dot( vSunDirection, up ) );', '\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );', '\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\n\n\t\t// extinction (absorbtion + out scattering)\n\t\t// rayleigh coefficients\n\t\t'\tvBetaR = totalRayleigh * rayleighCoefficient;',\n\n\t\t// mie coefficients\n\t\t'\tvBetaM = totalMie( turbidity ) * mieCoefficient;', '}'].join('\\n'),\n\n\t\tfragmentShader: ['varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', 'uniform float luminance;', 'uniform float mieDirectionalG;', 'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;', 'const float n = 1.0003;', // refractive index of air\n\t\t'const float N = 2.545E25;', // number of molecules per unit volume for air at\n\t\t// 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\t'const float rayleighZenithLength = 8.4E3;', 'const float mieZenithLength = 1.25E3;', 'const vec3 up = vec3( 0.0, 1.0, 0.0 );',\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\t'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\t'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\n\t\t// 1.0 / ( 4.0 * pi )\n\t\t'const float ONE_OVER_FOURPI = 0.07957747154594767;', 'float rayleighPhase( float cosTheta ) {', '\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );', '}', 'float hgPhase( float cosTheta, float g ) {', '\tfloat g2 = pow( g, 2.0 );', '\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );', '\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );', '}',\n\n\t\t// Filmic ToneMapping http://filmicgames.com/archives/75\n\t\t'const float A = 0.15;', 'const float B = 0.50;', 'const float C = 0.10;', 'const float D = 0.20;', 'const float E = 0.02;', 'const float F = 0.30;', 'const float whiteScale = 1.0748724675633854;', // 1.0 / Uncharted2Tonemap(1000.0)\n\n\t\t'vec3 Uncharted2Tonemap( vec3 x ) {', '\treturn ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;', '}', 'void main() {',\n\t\t// optical length\n\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t'\tfloat zenithAngle = acos( max( 0.0, dot( up, normalize( vWorldPosition - cameraPos ) ) ) );', '\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );', '\tfloat sR = rayleighZenithLength * inverse;', '\tfloat sM = mieZenithLength * inverse;',\n\n\t\t// combined extinction factor\n\t\t'\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\n\n\t\t// in scattering\n\t\t'\tfloat cosTheta = dot( normalize( vWorldPosition - cameraPos ), vSunDirection );', '\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );', '\tvec3 betaRTheta = vBetaR * rPhase;', '\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );', '\tvec3 betaMTheta = vBetaM * mPhase;', '\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );', '\tLin *= mix(vec3(1.0), pow(vSunE * ((betaRTheta + betaMTheta) / (vBetaR + vBetaM)) * Fex, vec3(1.0 / 2.0)), clamp(pow(1.0 - 10.0 * dot(up, vSunDirection), 5.0), 0.0, 1.0));',\n\n\t\t// nightsky\n\t\t'\tvec3 direction = normalize( vWorldPosition - cameraPos );', '\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]', '\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]', '\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );', '\tvec3 L0 = vec3( 0.1 ) * Fex;',\n\n\t\t// composition + solar disc\n\t\t//'\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\n\t\t//'\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\n\n\t\t//'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\n\t\t//'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\n\t\t'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.001 );', '\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );',\n\t\t//'\tvec3 color = curr; * whiteScale;',\n\t\t'\tvec3 retColor = pow( curr * 0.9, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );', '\tgl_FragColor = vec4( retColor, 1.0 );', '}'].join('\\n')\n\n};\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/SkyShader.js?");

/***/ }),

/***/ "./js/lib/glsl/UnrealBloomPass.js":
/*!****************************************!*\
  !*** ./js/lib/glsl/UnrealBloomPass.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author spidersharma / http://eduperiment.com/\r\n *\r\n * Inspired from Unreal Engine\r\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\r\n */\nTHREE.UnrealBloomPass = function (resolution, strength, radius, threshold) {\n\n\tTHREE.Pass.call(this);\n\n\tthis.strength = strength !== undefined ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new THREE.Color(0, 0, 0);\n\n\t// render targets\n\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round(this.resolution.x / 2);\n\tvar resy = Math.round(this.resolution.y / 2);\n\n\tthis.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor (var i = 0; i < this.nMips; i++) {\n\n\t\tvar renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push(renderTargetHorizonal);\n\n\t\tvar renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push(renderTargetVertical);\n\n\t\tresx = Math.round(resx / 2);\n\n\t\tresy = Math.round(resy / 2);\n\t}\n\n\t// luminosity high pass material\n\n\tif (THREE.LuminosityHighPassShader === undefined) console.error(\"THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader\");\n\n\tvar highPassShader = THREE.LuminosityHighPassShader;\n\tthis.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);\n\n\tthis.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n\tthis.highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n\tthis.materialHighPassFilter = new THREE.ShaderMaterial({\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t});\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [3, 5, 7, 9, 11];\n\tvar resx = Math.round(this.resolution.x / 2);\n\tvar resy = Math.round(this.resolution.y / 2);\n\n\tfor (var i = 0; i < this.nMips; i++) {\n\n\t\tthis.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n\n\t\tthis.separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(resx, resy);\n\n\t\tresx = Math.round(resx / 2);\n\n\t\tresy = Math.round(resy / 2);\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial(this.nMips);\n\tthis.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n\tthis.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n\tthis.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n\tthis.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n\tthis.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n\tthis.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n\tthis.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n\tthis.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n\tthis.bloomTintColors = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];\n\tthis.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n\n\t// copy material\n\tif (THREE.CopyShader === undefined) {\n\n\t\tconsole.error(\"THREE.BloomPass relies on THREE.CopyShader\");\n\t}\n\n\tvar copyShader = THREE.CopyShader;\n\n\tthis.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n\tthis.copyUniforms[\"opacity\"].value = 1.0;\n\n\tthis.materialCopy = new THREE.ShaderMaterial({\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: THREE.AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t});\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new THREE.Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new THREE.MeshBasicMaterial();\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad(null);\n};\n\nTHREE.UnrealBloomPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n\n\tconstructor: THREE.UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n\n\t\t\tthis.renderTargetsHorizontal[i].dispose();\n\t\t}\n\n\t\tfor (var i = 0; i < this.renderTargetsVertical.length; i++) {\n\n\t\t\tthis.renderTargetsVertical[i].dispose();\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\t},\n\n\tsetSize: function (width, height) {\n\n\t\tvar resx = Math.round(width / 2);\n\t\tvar resy = Math.round(height / 2);\n\n\t\tthis.renderTargetBright.setSize(resx, resy);\n\n\t\tfor (var i = 0; i < this.nMips; i++) {\n\n\t\t\tthis.renderTargetsHorizontal[i].setSize(resx, resy);\n\t\t\tthis.renderTargetsVertical[i].setSize(resx, resy);\n\n\t\t\tthis.separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(resx, resy);\n\n\t\t\tresx = Math.round(resx / 2);\n\t\t\tresy = Math.round(resy / 2);\n\t\t}\n\t},\n\n\trender: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n\n\t\tthis.oldClearColor.copy(renderer.getClearColor());\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor(this.clearColor, 0);\n\n\t\tif (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST);\n\n\t\t// Render input to screen\n\n\t\tif (this.renderToScreen) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget(null);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n\t\tthis.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget(this.renderTargetBright);\n\t\trenderer.clear();\n\t\tthis.fsQuad.render(renderer);\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor (var i = 0; i < this.nMips; i++) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[i];\n\n\t\t\tthis.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[i].uniforms[\"direction\"].value = THREE.UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\tthis.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n\t\t\tthis.separableBlurMaterials[i].uniforms[\"direction\"].value = THREE.UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget(this.renderTargetsVertical[i]);\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render(renderer);\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[i];\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n\t\trenderer.clear();\n\t\tthis.fsQuad.render(renderer);\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n\n\t\tif (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);\n\n\t\tif (this.renderToScreen) {\n\n\t\t\trenderer.setRenderTarget(null);\n\t\t\tthis.fsQuad.render(renderer);\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget(readBuffer);\n\t\t\tthis.fsQuad.render(renderer);\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n\t\trenderer.autoClear = oldAutoClear;\n\t},\n\n\tgetSeperableBlurMaterial: function (kernelRadius) {\n\n\t\treturn new THREE.ShaderMaterial({\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new THREE.Vector2(0.5, 0.5) },\n\t\t\t\t\"direction\": { value: new THREE.Vector2(0.5, 0.5) }\n\t\t\t},\n\n\t\t\tvertexShader: \"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\n\n\t\t\tfragmentShader: \"#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\n\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat x = float(i);\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\r\n\t\t\t\t}\"\n\t\t});\n\t},\n\n\tgetCompositeMaterial: function (nMips) {\n\n\t\treturn new THREE.ShaderMaterial({\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader: \"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\n\n\t\t\tfragmentShader: \"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D blurTexture1;\\\r\n\t\t\t\tuniform sampler2D blurTexture2;\\\r\n\t\t\t\tuniform sampler2D blurTexture3;\\\r\n\t\t\t\tuniform sampler2D blurTexture4;\\\r\n\t\t\t\tuniform sampler2D blurTexture5;\\\r\n\t\t\t\tuniform sampler2D dirtTexture;\\\r\n\t\t\t\tuniform float bloomStrength;\\\r\n\t\t\t\tuniform float bloomRadius;\\\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\r\n\t\t\t\t}\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\r\n\t\t\t\t}\"\n\t\t});\n\t}\n\n});\n\nTHREE.UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nTHREE.UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/UnrealBloomPass.js?");

/***/ }),

/***/ "./js/lib/glsl/index.js":
/*!******************************!*\
  !*** ./js/lib/glsl/index.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CopyShader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CopyShader.js */ \"./js/lib/glsl/CopyShader.js\");\n/* harmony import */ var _CopyShader_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CopyShader_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _EffectComposer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EffectComposer.js */ \"./js/lib/glsl/EffectComposer.js\");\n/* harmony import */ var _EffectComposer_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_EffectComposer_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _LuminosityHighPassShader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LuminosityHighPassShader.js */ \"./js/lib/glsl/LuminosityHighPassShader.js\");\n/* harmony import */ var _LuminosityHighPassShader_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_LuminosityHighPassShader_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _RenderPass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RenderPass.js */ \"./js/lib/glsl/RenderPass.js\");\n/* harmony import */ var _RenderPass_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_RenderPass_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ShaderPass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ShaderPass.js */ \"./js/lib/glsl/ShaderPass.js\");\n/* harmony import */ var _ShaderPass_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ShaderPass_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./UnrealBloomPass.js */ \"./js/lib/glsl/UnrealBloomPass.js\");\n/* harmony import */ var _UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n//import './SkyShader.js';\n//import './Poster.js'\n\n//# sourceURL=webpack://clouds/./js/lib/glsl/index.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_logic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/logic */ \"./js/modules/logic.js\");\n/* harmony import */ var _modules_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/renderer */ \"./js/modules/renderer.js\");\n/* harmony import */ var _modules_control_surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/control_surface */ \"./js/modules/control_surface.js\");\n/** App init and main loop. */\n\n\n\n\n\nclass App {\n  constructor() {\n    // init\n    this.logic = new _modules_logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.renderer = new _modules_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\n    this.controlSurface = new _modules_control_surface__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this);\n\n    // timing\n    this.time = {\n      now: performance.now(),\n      maxDelta: 0.1\n    };\n\n    // run\n    this.active = true;\n    this.loop();\n  }\n\n  loop() {\n    requestAnimationFrame(() => {\n      this.loop();\n    });\n    if (this.active) {\n      const t = performance.now();\n      const delta = Math.min(this.time.maxDelta, (t - this.time.now) / 1000);\n      this.time.now = t;\n      this.logic.update(delta);\n      this.renderer.render(delta);\n    }\n  }\n}\n\nwindow.onload = () => {\n  const app = new App();\n};\n\n//# sourceURL=webpack://clouds/./js/main.js?");

/***/ }),

/***/ "./js/modules/camera.js":
/*!******************************!*\
  !*** ./js/modules/camera.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/** First-person camera. */\n\nclass Camera {\n  constructor(root) {\n    this.root = root;\n    this.position = root.player.position;\n    this.rotation = root.player.rotation;\n    this.height = root.player.height;\n    //this.target = new THREE.Vector3();\n    this.fov = 65;\n    this.aspectRatio = this.root.width / this.root.height;\n    this.offset = 0.1;\n    this.camera = new THREE.PerspectiveCamera(this.fov, this.aspectRatio, 0.1, 2000000);\n    this.camera.up = new THREE.Vector3(0, 1, 0);\n    this.camera.rotation.order = 'YXZ';\n  }\n\n  resize(w, h) {\n    this.aspectRatio = this.root.width / this.root.height;\n    this.camera.aspect = this.aspectRatio;\n    this.camera.updateProjectionMatrix();\n  }\n\n  update(delta) {\n    const offsetXZ = this.offset - this.offset * Math.abs(Math.sin(this.rotation.y));\n    const offsetY = this.offset;\n    const y = this.position.y + this.height;\n    this.camera.position.set(this.position.x, this.position.y + this.height, this.position.z);\n    this.camera.rotation.y = this.rotation.x + Math.PI;\n    this.camera.rotation.x = this.rotation.y;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Camera);\n\n//# sourceURL=webpack://clouds/./js/modules/camera.js?");

/***/ }),

/***/ "./js/modules/control_surface.js":
/*!***************************************!*\
  !*** ./js/modules/control_surface.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ui_mouse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/mouse */ \"./js/ui/mouse.js\");\n/* harmony import */ var _ui_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/keyboard */ \"./js/ui/keyboard.js\");\n/* harmony import */ var _utils_maths__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/maths */ \"./js/utils/maths.js\");\n/** Control surface/ user interface. */\n\n\n\n\n\nclass ControlSurface {\n  constructor(root) {\n    this.player = root.logic.player;\n    this.domElement = document.querySelector('#canvas-target');\n    this.centre = { x: 0, y: 0 };\n    this.resize();\n    this.rotation = new THREE.Vector2();\n    this.timestamp = null;\n    this.threshold = { click: 225, pan: 200, mouseDelta: 0.25 };\n    this.scaleRotation = { x: 1, y: 1 };\n\n    // events\n    this.keyboard = new _ui_keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"](key => {\n      this.onKeyboard(key);\n    });\n    this.mouse = new _ui_mouse__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.domElement, e => {\n      this.onMouseDown(e);\n    }, e => {\n      this.onMouseMove(e);\n    }, e => {\n      this.onMouseUp(e);\n    }, this.isMobile);\n  }\n\n  processTouch(e) {\n    let x = 0,\n        y = 0;\n    if (e.targetTouches && e.targetTouches.length) {\n      const rect = this.domElement.getBoundingClientRect();\n      const touch = e.targetTouches[0];\n      x = touch.pageX - rect.left;\n      y = touch.pageY - rect.top;\n    }\n    return { offsetX: x, offsetY: y };\n  }\n\n  onMouseDown(e) {\n    // record player rotation\n    this.rotation.y = this.player.rotation.y;\n    this.rotation.x = this.player.rotation.x;\n    this.timestamp = Date.now();\n    this.mouse.start(e);\n\n    // set cursor position mobile\n    if (this.isMobile) {\n      this.onMouseMove(e);\n    }\n  }\n\n  onMouseMove(e) {\n    this.mouse.move(e);\n\n    if (this.mouse.active) {\n      // update player rotation\n      if (!(this.player.keys.left || this.player.keys.right)) {\n        const yaw = this.rotation.x + this.mouse.delta.x / this.centre.x * this.scaleRotation.x;\n        const pitch = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_2__[\"Clamp\"])(this.rotation.y + this.mouse.delta.y / this.centre.y * this.scaleRotation.y, this.player.minPitch, this.player.maxPitch);\n        if (pitch == this.player.minPitch || pitch == this.player.maxPitch) {\n          this.mouse.origin.y = e.offsetY;\n          this.rotation.y = pitch;\n        }\n        this.player.setRotation(pitch, yaw);\n      }\n    } else {\n      // mouse move\n    }\n  }\n\n  onMouseUp(e) {\n    this.mouse.stop();\n    if (Date.now() - this.timestamp < this.threshold.click && Math.hypot(this.mouse.delta.x, this.mouse.delta.y) < window.innerWidth * this.threshold.mouseDelta) {\n      // click !\n    }\n  }\n\n  onKeyboard(key) {\n    switch (key) {\n      case 'a':case 'A':case 'ArrowLeft':\n        this.player.keys.left = this.keyboard.keys[key];\n        break;\n      case 'd':case 'D':case 'ArrowRight':\n        this.player.keys.right = this.keyboard.keys[key];\n        break;\n      case 'w':case 'W':case 'ArrowUp':\n        this.player.keys.up = this.keyboard.keys[key];\n        break;\n      case 's':case 'S':case 'ArrowDown':\n        this.player.keys.down = this.keyboard.keys[key];\n        break;\n      case ' ':\n        this.player.keys.jump = this.keyboard.keys[key];\n        break;\n      default:\n        break;\n    }\n  }\n\n  resize() {\n    const rect = this.domElement.getBoundingClientRect();\n    this.centre.x = rect.width / 2;\n    this.centre.y = rect.height / 2;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ControlSurface);\n\n//# sourceURL=webpack://clouds/./js/modules/control_surface.js?");

/***/ }),

/***/ "./js/modules/logic.js":
/*!*****************************!*\
  !*** ./js/modules/logic.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"./js/config.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player */ \"./js/modules/player.js\");\n/* harmony import */ var _camera__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./camera */ \"./js/modules/camera.js\");\n/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./world */ \"./js/modules/world.js\");\n/** Game logic. */\n\n\n\n\n\n\nclass Logic {\n  constructor() {\n    this.width = _config__WEBPACK_IMPORTED_MODULE_0__[\"default\"].width;\n    this.height = _config__WEBPACK_IMPORTED_MODULE_0__[\"default\"].height;\n    this.scene = new THREE.Scene();\n    this.colliderSystem = new Collider.System();\n    this.player = new _player__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\n    this.camera = new _camera__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this);\n    this.world = new _world__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this);\n\n    // temp\n    const floor = new THREE.Mesh(new THREE.BoxBufferGeometry(10, 50, 10), new THREE.MeshPhysicalMaterial({ color: 0x888888 }));\n    floor.position.set(0, -25, 0);\n    this.scene.add(floor);\n    this.colliderSystem.add(floor);\n  }\n\n  update(delta) {\n    this.world.update(delta);\n    this.player.update(delta);\n    this.camera.update(delta);\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Logic);\n\n//# sourceURL=webpack://clouds/./js/modules/logic.js?");

/***/ }),

/***/ "./js/modules/material/cloud_material.js":
/*!***********************************************!*\
  !*** ./js/modules/material/cloud_material.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/** Custom cloud shader */\n\nconst CloudMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    uTime: { value: 1.0 },\n    uDetailLevel: { value: 1.0 } // 1, 2, 3\n  },\n  vertexShader: `\n    varying vec2 vUV;\n\n    void main() {\n      vUV = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    const float sqrt_half = 0.7071;\n    const float sqrt2 = 1.41421;\n    const float sqrt2_2 = 2.82842;\n    const float const289 = 0.00346020761; //= 1.0 / 289.0\n    varying vec2 vUV;\n    uniform float uTime;\n    uniform float uDetailLevel;\n\n    // height normals\n    vec3 computeNormal(vec3 a, vec3 b, vec3 c, float height) {\n      vec3 ab = vec3(1.0, (b.y - a.y) * height, 0.0);\n      vec3 ac = vec3(0.0, (c.y - a.y) * height, 1.0);\n      return cross(normalize(ab), normalize(ac));\n    }\n\n    // smoothing\n    vec3 mod289(vec3 x) { return x - floor(x * const289) * 289.0; }\n    vec4 mod289(vec4 x) { return x - floor(x * const289) * 289.0; }\n    vec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\n    vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n    vec3 fade(vec3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }\n\n    // perlin noise\n    float noise(vec3 v) {\n        vec3 i0 = mod289(floor(v)), i1 = mod289(i0 + vec3(1.0));\n        vec3 f0 = fract(v), f1 = f0 - vec3(1.0), f = fade(f0);\n        vec4 ix = vec4(i0.x, i1.x, i0.x, i1.x), iy = vec4(i0.yy, i1.yy);\n        vec4 iz0 = i0.zzzz, iz1 = i1.zzzz;\n        vec4 ixy = permute(permute(ix) + iy), ixy0 = permute(ixy + iz0), ixy1 = permute(ixy + iz1);\n        vec4 gx0 = ixy0 * (1.0 / 7.0), gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        vec4 gx1 = ixy1 * (1.0 / 7.0), gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0); gx1 = fract(gx1);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0), sz0 = step(gz0, vec4(0.0));\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1), sz1 = step(gz1, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5); gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5); gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n        vec3 g0 = vec3(gx0.x, gy0.x, gz0.x), g1 = vec3(gx0.y, gy0.y, gz0.y),\n          g2 = vec3(gx0.z, gy0.z, gz0.z), g3 = vec3(gx0.w, gy0.w, gz0.w),\n          g4 = vec3(gx1.x, gy1.x, gz1.x), g5 = vec3(gx1.y, gy1.y, gz1.y),\n          g6 = vec3(gx1.z, gy1.z, gz1.z), g7 = vec3(gx1.w, gy1.w, gz1.w);\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g0, g0), dot(g2, g2), dot(g1, g1), dot(g3, g3)));\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g4, g4), dot(g6, g6), dot(g5, g5), dot(g7, g7)));\n        g0 *= norm0.x; g2 *= norm0.y; g1 *= norm0.z; g3 *= norm0.w;\n        g4 *= norm1.x; g6 *= norm1.y; g5 *= norm1.z; g7 *= norm1.w;\n        vec4 nz = mix(vec4(dot(g0, vec3(f0.x, f0.y, f0.z)), dot(g1, vec3(f1.x, f0.y, f0.z)),\n          dot(g2, vec3(f0.x, f1.y, f0.z)), dot(g3, vec3(f1.x, f1.y, f0.z))),\n          vec4(dot(g4, vec3(f0.x, f0.y, f1.z)), dot(g5, vec3(f1.x, f0.y, f1.z)),\n            dot(g6, vec3(f0.x, f1.y, f1.z)), dot(g7, vec3(f1.x, f1.y, f1.z))), f.z);\n        return 2.4 * mix(mix(nz.x, nz.z, f.y), mix(nz.y, nz.w, f.y), f.x);\n    }\n\n    float turbulenceHigh(vec3 v) {\n      float f = 0.0;\n      float s = 1.0;\n      for (int i=0; i<7; ++i) {\n        f += abs(noise(s * v)) / s;\n        s *= 2.0;\n        v = vec3(0.866 * v.x + 0.5 * v.z, v.y + 100.0, 0.866 * v.z - 0.5 * v.x);\n      }\n      return f;\n    }\n\n    float turbulenceMid(vec3 v) {\n      float f = 0.0;\n      float s = 1.0;\n      for (int i=0; i<5; ++i) {\n        f += abs(noise(s * v)) / s;\n        s *= 2.0;\n        v = vec3(0.866 * v.x + 0.5 * v.z, v.y + 100.0, 0.866 * v.z - 0.5 * v.x);\n      }\n      return f;\n    }\n\n    float turbulenceLow(vec3 v) {\n      float f = 0.0;\n      float s = 1.0;\n      for (int i=0; i<2; ++i) {\n        f += abs(noise(v * s)) / s;\n        s *= 2.0;\n        v = vec3(0.866 * v.x + 0.5 * v.z, v.y + 100.0, 0.866 * v.z - 0.5 * v.x);\n      }\n      return f;\n    }\n\n    vec3 clouds(float x, float y, float t, float detail) {\n      vec3 v = vec3(x, y, t);\n      float f = detail == 3.0 ? turbulenceHigh(v) : detail == 2.0 ? turbulenceMid(v) : turbulenceLow(v);\n      return vec3(noise(vec3(0.5, 0.5, f) * 0.7)) + vec3(1.0, 1.0, 1.0);\n    }\n\n    void main() {\n      float speed = 0.015;\n      float offset = uTime * speed * -0.5;\n      float phase = uTime * speed;\n      float x = vUV.x * 5.0 + offset;\n      float y = vUV.y * 5.0;\n      vec3 colour = clouds(x, y, phase, uDetailLevel);\n\n      // calc normals\n      float res = 0.1;\n      float cloudHeight = 50.0;\n      float detail = max(1.0, uDetailLevel - 1.0);\n      vec3 p1 = clouds(x + res, y, phase, detail);\n      vec3 p2 = clouds(x, y + res, phase, detail);\n      vec3 norm = computeNormal(colour, p1, p2, cloudHeight);\n      float light = dot(norm, vec3(0.0, 1.0, 0.0)) - 0.5;\n\n      // result\n      float alpha = 1.0 - min(1.0, sqrt(pow(0.5 - vUV.x, 2.0) + pow(0.5 - vUV.y, 2.0)) / 0.5);\n      gl_FragColor = vec4(colour + light * 0.5, colour.x * alpha);\n    }\n  `\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CloudMaterial);\n\n//# sourceURL=webpack://clouds/./js/modules/material/cloud_material.js?");

/***/ }),

/***/ "./js/modules/player.js":
/*!******************************!*\
  !*** ./js/modules/player.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_maths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/maths */ \"./js/utils/maths.js\");\n/**\r\n ** Handle user input and move/ rotate player position.\r\n **/\n\n\n\nclass Player {\n  constructor(root) {\n    this.root = root;\n\n    // set position\n    this.position = new THREE.Vector3(0, 1, 0);\n    this.rotation = new THREE.Vector2();\n    this.motion = new THREE.Vector3();\n    this.target = {\n      position: this.position.clone(),\n      rotation: this.rotation.clone(),\n      motion: this.motion.clone()\n    };\n\n    // bind collision system\n    this.collider = new Collider.Point({\n      system: this.root.colliderSystem,\n      position: this.target.position,\n      motion: this.motion,\n      gravity: 20,\n      floor: -1\n    });\n\n    // physical attributes\n    this.speed = 6;\n    this.rotationSpeed = Math.PI * 0.5;\n    this.jump = 8;\n    this.jumpSpeedMultiplier = 0.25;\n    this.height = 3;\n    this.falling = false;\n    this.fallTime = 0;\n    this.fallTimeThreshold = 0.2;\n    this.minPitch = Math.PI * -0.15;\n    this.maxPitch = Math.PI * 0.15;\n    this.adjust = { slow: 0.05, normal: 0.1, fast: 0.125, maximum: 0.3 };\n    this.noclip = false;\n\n    // input\n    this.keys = { disabled: false };\n  }\n\n  move(delta) {\n    // key input to motion\n    if (this.keys.left || this.keys.right) {\n      const rot = (this.keys.left ? 1 : 0) + (this.keys.right ? -1 : 0);\n      this.target.rotation.x += rot * this.rotationSpeed * delta;\n    }\n\n    if (this.keys.up || this.keys.down) {\n      const speed = this.noclip ? this.noclipSpeed * (1 - Math.abs(Math.sin(this.target.rotation.y))) : this.speed;\n      const dir = (this.keys.up ? 1 : 0) + (this.keys.down ? -1 : 0);\n      this.target.motion.x = Math.sin(this.rotation.x) * speed * dir;\n      this.target.motion.z = Math.cos(this.rotation.x) * speed * dir;\n    } else {\n      this.target.motion.x = 0;\n      this.target.motion.z = 0;\n    }\n\n    if (this.keys.jump) {\n      if (this.motion.y == 0 || this.fallTime < this.fallTimeThreshold) {\n        this.motion.y = this.jump;\n        this.fallTime = this.fallTimeThreshold;\n      }\n    }\n\n    // decide if falling\n    this.falling = this.motion.y != 0;\n    this.fallTime = this.falling ? this.fallTime + delta : 0;\n\n    // noclip\n    if (this.noclip) {\n      this.falling = false;\n      if (this.keys.up || this.keys.down) {\n        const d = (this.keys.up ? 1 : 0) + (this.keys.down ? -1 : 0);\n        this.target.motion.y = Math.sin(this.target.rotation.y) * d * this.noclipSpeed;\n      } else {\n        this.target.motion.y = 0;\n      }\n      this.motion.y = this.target.motion.y;\n    }\n\n    // reduce speed if falling\n    if (!this.falling) {\n      this.motion.x = this.target.motion.x;\n      this.motion.z = this.target.motion.z;\n    } else {\n      this.motion.x = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"Blend\"])(this.motion.x, this.target.motion.x, this.jumpSpeedMultiplier);\n      this.motion.z = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"Blend\"])(this.motion.z, this.target.motion.z, this.jumpSpeedMultiplier);\n    }\n  }\n\n  setRotation(pitch, yaw) {\n    this.target.rotation.y = pitch;\n    this.target.rotation.x = yaw;\n  }\n\n  update(delta) {\n    // move\n    if (!this.keys.disabled) {\n      this.move(delta);\n      if (!this.noclip) {\n        this.collider.collide(delta);\n      } else {\n        this.target.position.x += this.motion.x * delta;\n        this.target.position.y += this.motion.y * delta;\n        this.target.position.z += this.motion.z * delta;\n      }\n      this.position.x = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"Blend\"])(this.position.x, this.target.position.x, this.adjust.maximum);\n      this.position.y = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"Blend\"])(this.position.y, this.target.position.y, this.adjust.maximum);\n      this.position.z = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"Blend\"])(this.position.z, this.target.position.z, this.adjust.maximum);\n    }\n\n    // rotate\n    this.rotation.x += Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"MinAngleBetween\"])(this.rotation.x, this.target.rotation.x) * this.adjust.normal;\n    this.rotation.y = Object(_utils_maths__WEBPACK_IMPORTED_MODULE_0__[\"Blend\"])(this.rotation.y, this.target.rotation.y, this.adjust.normal);\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack://clouds/./js/modules/player.js?");

/***/ }),

/***/ "./js/modules/renderer.js":
/*!********************************!*\
  !*** ./js/modules/renderer.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/glsl */ \"./js/lib/glsl/index.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ \"./js/config.js\");\n/** Three.js/ webgl renderer. */\n\n\n\n\nclass Renderer {\n  constructor(root) {\n    this.root = root;\n\n    // three.js setup\n    this.renderer = new THREE.WebGLRenderer({});\n    this.renderer.setClearColor(0x0, 1);\n    this.renderer.gammaInput = true;\n    this.renderer.gammaOutput = true;\n    this.renderer.gammaFactor = 2;\n    this.width = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].width;\n    this.height = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].height;\n    this.size = new THREE.Vector2(this.width, this.height);\n\n    // render passes\n    const strength = 0.5;\n    const radius = 0.125;\n    const threshold = 0.96;\n    this.passRender = new THREE.RenderPass(root.logic.scene, root.logic.camera.camera);\n    //this.passPoster = new THREE.PosterPass(this.size);\n    this.passBloom = new THREE.UnrealBloomPass(this.size, strength, radius, threshold);\n    this.passBloom.renderToScreen = true;\n\n    // composer\n    this.composer = new THREE.EffectComposer(this.renderer);\n    this.composer.addPass(this.passRender);\n    //this.composer.addPass(this.passPoster);\n    this.composer.addPass(this.passBloom);\n\n    // add to dom\n    this.resize();\n    document.querySelector('#canvas-target').appendChild(this.renderer.domElement);\n  }\n\n  resize() {\n    this.width = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].width;\n    this.height = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].height;\n    this.size.x = this.width;\n    this.size.y = this.height;\n    this.renderer.setSize(this.width, this.height);\n    this.composer.setSize(this.width, this.height);\n    this.passBloom.setSize(this.width, this.height);\n  }\n\n  render(delta) {\n    this.composer.render(delta);\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Renderer);\n\n//# sourceURL=webpack://clouds/./js/modules/renderer.js?");

/***/ }),

/***/ "./js/modules/world.js":
/*!*****************************!*\
  !*** ./js/modules/world.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_glsl_SkyShader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/glsl/SkyShader.js */ \"./js/lib/glsl/SkyShader.js\");\n/* harmony import */ var _lib_glsl_SkyShader_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_glsl_SkyShader_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _material_cloud_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material/cloud_material */ \"./js/modules/material/cloud_material.js\");\n/** World objects */\n\n\n\n\nclass World {\n  constructor(root) {\n    this.root = root;\n    this.scene = root.scene;\n\n    // clouds\n    this.cloudMat = _material_cloud_material__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    this.cloudMat.transparent = true;\n    this.cloudMat.uniforms.uTime.value = Math.random() * 60;\n    this.cloudPlane = new THREE.Mesh(new THREE.PlaneBufferGeometry(1500, 2000), this.cloudMat);\n    this.cloudPlane.rotation.x = -Math.PI / 2;\n    this.scene.add(this.cloudPlane);\n\n    const directional = new THREE.DirectionalLight(0xffffff, 0.5);\n    const ambient = new THREE.AmbientLight(0xffffff, 0.1);\n    directional.position.set(0, 0, 0);\n    directional.target.position.set(0, -0.25, 1);\n    this.scene.add(ambient, directional, directional.target);\n\n    // sky\n    this.sky = new THREE.Sky();\n    this.sky.scale.setScalar(450000);\n    const d = 400000;\n    const azimuth = 0.25;\n    const inclination = 0.495; //0.4875;\n    const theta = Math.PI * (inclination - 0.5);\n    const phi = Math.PI * 2 * (azimuth - 0.5);\n    const sunPos = new THREE.Vector3(d * Math.cos(phi), d * Math.sin(phi) * Math.sin(theta), d * Math.sin(phi) * Math.cos(theta));\n    this.sky.material.uniforms.sunPosition.value.copy(sunPos);\n    this.scene.add(this.sky);\n  }\n\n  update(delta) {\n    this.cloudMat.uniforms.uTime.value += delta;\n    this.cloudPlane.position.copy(this.root.camera.camera.position);\n    this.cloudPlane.position.y -= 50;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (World);\n\n//# sourceURL=webpack://clouds/./js/modules/world.js?");

/***/ }),

/***/ "./js/ui/keyboard.js":
/*!***************************!*\
  !*** ./js/ui/keyboard.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/** Keyboard interface.  */\n\nclass Keyboard {\n  constructor(onEvent) {\n    this.keys = {};\n    this.onEvent = onEvent;\n    document.addEventListener('keydown', key => {\n      this.onKeyDown(key);\n    });\n    document.addEventListener('keyup', key => {\n      this.onKeyUp(key);\n    });\n  }\n\n  onKeyDown(key) {\n    this.keys[key.key] = true;\n    this.onEvent(key.key);\n  }\n\n  onKeyUp(key) {\n    this.keys[key.key] = false;\n    this.onEvent(key.key);\n  }\n\n  release(key) {\n    this.keys[key] = false;\n  }\n\n  isSpecial() {\n    return this.keys['Shift'] || this.keys['Control'] || this.keys['Alt'];\n  }\n\n  isControl() {\n    return this.keys['Control'];\n  }\n\n  isShift() {\n    return this.keys['Shift'];\n  }\n\n  isAlt() {\n    return this.keys['Alt'];\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Keyboard);\n\n//# sourceURL=webpack://clouds/./js/ui/keyboard.js?");

/***/ }),

/***/ "./js/ui/mouse.js":
/*!************************!*\
  !*** ./js/ui/mouse.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/** Mouse interface. */\n\nclass Mouse {\n  constructor(domElement, onDown, onMove, onUp, isMobile) {\n    this.x = 0;\n    this.y = 0;\n    this.origin = { x: 0, y: 0 };\n    this.delta = { x: 0, y: 0 };\n    this.active = false;\n    this.domElement = domElement;\n\n    if (!isMobile) {\n      this.domElement.addEventListener('mousedown', onDown, false);\n      this.domElement.addEventListener('mousemove', onMove, false);\n      this.domElement.addEventListener('mouseup', onUp, false);\n      this.domElement.addEventListener('mouseleave', onUp, false);\n    } else {\n      this.domElement.addEventListener('touchstart', onDown, false);\n      this.domElement.addEventListener('touchmove', onMove, false);\n      this.domElement.addEventListener('touchend', onUp, false);\n    }\n\n    // universal\n    this.domElement.addEventListener('click', evt => {\n      onMove(evt);\n      onUp(evt);\n    }, false);\n  }\n\n  start(e) {\n    this.active = true;\n    this.origin.x = e.offsetX;\n    this.origin.y = e.offsetY;\n  }\n\n  move(e) {\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n    this.delta.x = this.x - this.origin.x;\n    this.delta.y = this.y - this.origin.y;\n  }\n\n  stop() {\n    this.active = false;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Mouse);\n\n//# sourceURL=webpack://clouds/./js/ui/mouse.js?");

/***/ }),

/***/ "./js/utils/maths.js":
/*!***************************!*\
  !*** ./js/utils/maths.js ***!
  \***************************/
/*! exports provided: Blend, Clamp, MinAngleBetween */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Blend\", function() { return Blend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Clamp\", function() { return Clamp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MinAngleBetween\", function() { return MinAngleBetween; });\n/** Useful maths. */\n\nconst Blend = (a, b, factor) => {\n  return (b - a) * factor + a;\n};\n\nconst MinAngleBetween = function (a1, a2) {\n  return Math.atan2(Math.sin(a2 - a1), Math.cos(a2 - a1));\n};\n\nconst Clamp = (value, min, max) => {\n  return Math.min(max, Math.max(min, value));\n};\n\n\n\n//# sourceURL=webpack://clouds/./js/utils/maths.js?");

/***/ })

/******/ });